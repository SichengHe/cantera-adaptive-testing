
    @problem
    def jacobian_sparsity(self, T0=1500, P0=ct.one_atm, V0=1.0):
        """

        """
        def get_precon_matrix(derv_sets, threshold=0, dense=False):
            ics = self.get_database_conditions(self.__class__.__name__, "pressure_problem")
            if ics is not None:
                T0, P0, V0 = ics
            # if not try with set conditions
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                gas = ct.Solution(self.model)
            gas.TP = T0, P0
            gas.set_equivalence_ratio(self.equiv_ratio, self.fuel, self.air)
            # create a new reactor
            reactor = ct.IdealGasConstPressureMoleReactor(gas, energy=self.energy_off)
            reactor.volume = V0
            # create a reactor network for performing time integration
            self.net = ct.ReactorNet([reactor, ])
            # apply numerical options
            precon = ct.AdaptivePreconditioner()
            precon.threshold = threshold
            self.net.preconditioner = precon
            if dense:
                self.net.initialize()
                return np.ones((self.net.n_vars, self.net.n_vars))
            self.net.derivative_settings = derv_sets
            self.net.advance(0.01)
            return precon.matrix

        def plot_sparsity_array(arr, fname):
            x = []
            y = []
            xdim, ydim = np.shape(arr)
            for xi in range(xdim):
                for yi in range(ydim):
                    if arr[xi,yi] != 0:
                        x.append(xi)
                        y.append(ydim-yi)
            fig = plt.figure()
            fig.tight_layout()
            plt.scatter(x, y, marker='.', color='#7570b3')
            ax = plt.gca()
            ax.spines['bottom'].set_color('0.0')
            ax.spines['top'].set_color('0.0')
            ax.spines['right'].set_color('0.0')
            ax.spines['left'].set_color('0.0')
            plt.tick_params( axis='both',          # changes apply to the x-axis
                             which='both',      # both major and minor ticks are affected
                             bottom=False,      # ticks along the bottom edge are off
                             top=False,         # ticks along the top edge are off
                             left=False,
                             labelbottom=False,
                             labelleft=False)  # labels along the bottom edge are off
            fname = os.path.join("figures", fname)
            plt.savefig(fname)
            plt.close()
        # plot dense
        no_assume_sets = {"skip-falloff": False, "skip-third-bodies": False,
                         "analytical-temp-derivs": False}
        no_assume_mat = get_precon_matrix(no_assume_sets, dense=True)
        plot_sparsity_array(no_assume_mat, "no_assume_dense.jpg")
        # no assumption
        no_assume_sets = {"skip-falloff": False, "skip-third-bodies": False,
                         "analytical-temp-derivs": False}
        no_assume_mat = get_precon_matrix(no_assume_sets)
        plot_sparsity_array(no_assume_mat, "no_assume_sparse.jpg")
        # no assumption
        no_assume_sets = {"skip-falloff": False, "skip-third-bodies": False,
                         "analytical-temp-derivs": False}
        no_assume_mat = get_precon_matrix(no_assume_sets, threshold=1e-8)
        plot_sparsity_array(no_assume_mat, "no_assume_sparse_thresh.jpg")
        # no three body
        no_assume_sets = {"skip-falloff": False, "skip-third-bodies": True,
                         "analytical-temp-derivs": False}
        no_assume_mat = get_precon_matrix(no_assume_sets)
        plot_sparsity_array(no_assume_mat, "no_threebody_sparse.jpg")
        # no falloff
        no_assume_sets = {"skip-falloff": True, "skip-third-bodies": False,
                         "analytical-temp-derivs": False}
        no_assume_mat = get_precon_matrix(no_assume_sets)
        plot_sparsity_array(no_assume_mat, "no_falloff_sparse.jpg")
        # no falloff or three body
        no_assume_sets = {"skip-falloff": True, "skip-third-bodies": True,
                         "analytical-temp-derivs": False}
        no_assume_mat = get_precon_matrix(no_assume_sets)
        plot_sparsity_array(no_assume_mat, "no_tb_or_fo_sparse.jpg")
        # analyttemp
        no_assume_sets = {"skip-falloff": True, "skip-third-bodies": True,
                         "analytical-temp-derivs": True}
        no_assume_mat = get_precon_matrix(no_assume_sets)
        plot_sparsity_array(no_assume_mat, "analyt_sparse.jpg")
        # analyttemp
        no_assume_sets = {"skip-falloff": False, "skip-third-bodies": False,
                         "analytical-temp-derivs": True}
        no_assume_mat = get_precon_matrix(no_assume_sets)
        plot_sparsity_array(no_assume_mat, "analyt_sparse_none.jpg")
        # analyttemp
        no_assume_sets = {"skip-falloff": False, "skip-third-bodies": False,
                         "analytical-temp-derivs": True}
        no_assume_mat = get_precon_matrix(no_assume_sets, threshold=1e-8)
        plot_sparsity_array(no_assume_mat, "analyt_sparse_none_thresh.jpg")
        # applythresh
        no_assume_sets = {"skip-falloff": True, "skip-third-bodies": True,
                         "analytical-temp-derivs": False}
        no_assume_mat = get_precon_matrix(no_assume_sets, threshold=1e-8)
        plot_sparsity_array(no_assume_mat, "all_thresh_sparse.jpg")
        # applythresh and analyt
        no_assume_sets = {"skip-falloff": True, "skip-third-bodies": True,
                         "analytical-temp-derivs": True}
        no_assume_mat = get_precon_matrix(no_assume_sets, threshold=1e-8)
        plot_sparsity_array(no_assume_mat, "analyt_thresh_sparse.jpg")


    @problem
    def const_pressure_pfr(self, T0=1500, P0=ct.one_atm, V0=1.0, db_conds=True):
        """
        This problem is adapted from
        https://cantera.org/examples/python/reactors/pfr.py.html and is
        not entirely my own work

        This example solves a plug-flow reactor problem of
        hydrogen-oxygen combustion. The PFR is computed by two
        approaches: The simulation of a Lagrangian fluid particle, and
        the simulation of a chain of reactors.

        Requires: cantera >= 2.5.0
        """
        # get database conditions if available
        if db_conds:
            ics = self.get_database_conditions(self.__class__.__name__, "pressure_problem")
            if ics is not None:
                T0, P0, V0 = ics
        # if not try with set conditions
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            gas = ct.Solution(self.model)
        gas.TP = T0, P0
        gas.set_equivalence_ratio(self.equiv_ratio, self.fuel, self.air)
        # create a new reactor
        if self.moles:
            reactor = ct.IdealGasConstPressureMoleReactor(gas, energy=self.energy_off)
        else:
            reactor = ct.IdealGasConstPressureReactor(gas, energy=self.energy_off)
        reactor.volume = V0
        self.thermo_data.update({"thermo": {"model": self.model.split("/")[-1], "mole-reactor": self.moles, "nreactions": gas.n_reactions,
                                "nspecies": gas.n_species, "fuel": self.fuel, "air": self.air, "equiv_ratio": self.equiv_ratio, "T0": T0, "P0": P0, "V0": reactor.volume}})
        # create a reactor network for performing time integration
        self.net = ct.ReactorNet([reactor, ])
        # apply numerical options
        self.apply_numerical_options()
        # approximate a time step to achieve a similar resolution as in
        # the next method
        tf = 1.0
        self.sim_end_time = 0
        try:
            # self.net.advance_to_steady_state()
            self.net.advance(tf)
            ret_succ = True
        except Exception as e:
            self.exception = {"exception": str(e)}
            ret_succ = False
        finally:
            self.sim_end_time = self.net.time
            if self.update_db and ret_succ:
                self.update_database_conditions(self.__class__.__name__, "pressure_problem", T0, P0, V0)
        return ret_succ

    @problem
    def network_diesel_engine(self, T0=300, P0=1600e5, V0=.5e-3, db_conds=True):
        """
        This problem was adapted from
        https://cantera.org/examples/python/reactors/ic_engine.py.html

        Simulation of a (gaseous) Diesel-type internal combustion engine.

        The simulation uses n-Dodecane as fuel, which is injected close to top dead
        center. Note that this example uses numerous simplifying assumptions and
        thus serves for illustration purposes only.

        Requires: cantera >= 2.5.0, scipy >= 0.19, matplotlib >= 2.0
        """

        #########################################################################
        # Input Parameters
        #########################################################################
        T0 = 300
        P0 = 1600e5
        f = 3000. / 60.  # engine speed [1/s] (3000 rpm)
        V0 = .5e-3  # displaced volume [m**3]
        epsilon = 20.  # compression ratio [-]
        d_piston = 0.083  # piston diameter [m]
        # turbocharger temperature, pressure, and composition
        T_inlet = T0  # K
        p_inlet = 1.3e5  # Pa
        comp_inlet = self.air
        # outlet pressure
        p_outlet = 1.2e5  # Pa
        # fuel properties (gaseous!)
        T_injector = T0  # K
        p_injector = P0  # Pa
        comp_injector = self.fuel
        # ambient properties
        T_ambient = T0  # K
        p_ambient = ct.one_atm  # Pa
        comp_ambient = self.air
        # Inlet valve friction coefficient, open and close timings
        inlet_valve_coeff = 1.e-6
        inlet_open = -18. / 180. * np.pi
        inlet_close = 198. / 180. * np.pi
        # Outlet valve friction coefficient, open and close timings
        outlet_valve_coeff = 1.e-6
        outlet_open = 522. / 180 * np.pi
        outlet_close = 18. / 180. * np.pi
        # Fuel mass, injector open and close timings
        injector_open = 350. / 180. * np.pi
        injector_close = 365. / 180. * np.pi
        injector_mass = 3.2e-5  # kg
        # Simulation time and parameters
        sim_n_revolutions = 4
        delta_T_max = 20.
        rtol = 1.e-12
        atol = 1.e-16
        #####################################################################
        # Set up IC engine Parameters and Functions
        #####################################################################

        V_oT = V0 / (epsilon - 1.)
        A_piston = .25 * np.pi * d_piston ** 2
        stroke = V0 / A_piston

        def crank_angle(t):
            """Convert time to crank angle"""
            return np.remainder(2 * np.pi * f * t, 4 * np.pi)

        def piston_speed(t):
            """Approximate piston speed with sinusoidal velocity profile"""
            return - stroke / 2 * 2 * np.pi * f * np.sin(crank_angle(t))

        #####################################################################
        # Set up Reactor Network
        #####################################################################
        # load reaction mechanism
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            gas = ct.Solution(self.model)
        # define initial state and set up reactor
        gas.TPX = T_inlet, p_inlet, comp_inlet
        if self.moles:
            cyl = ct.IdealGasMoleReactor(gas, energy=self.energy_off)
        else:
            cyl = ct.IdealGasReactor(gas, energy=self.energy_off)
        cyl.volume = V_oT
        # define inlet state
        gas.TPX = T_inlet, p_inlet, comp_inlet
        inlet = ct.Reservoir(gas)
        # inlet valve
        inlet_valve = ct.Valve(inlet, cyl)
        inlet_delta = np.mod(inlet_close - inlet_open, 4 * np.pi)
        inlet_valve.valve_coeff = inlet_valve_coeff
        inlet_valve.set_time_function(lambda t: np.mod(
            crank_angle(t) - inlet_open, 4 * np.pi) < inlet_delta)
        # define injector state (gaseous!)
        gas.TPX = T_injector, p_injector, comp_injector
        injector = ct.Reservoir(gas)
        # injector is modeled as a mass flow controller
        injector_mfc = ct.MassFlowController(injector, cyl)
        injector_delta = np.mod(injector_close - injector_open, 4 * np.pi)
        injector_t_open = (injector_close - injector_open) / 2. / np.pi / f
        injector_mfc.mass_flow_coeff = injector_mass / injector_t_open
        injector_mfc.set_time_function(lambda t: np.mod(
            crank_angle(t) - injector_open, 4 * np.pi) < injector_delta)
        # define outlet pressure (temperature and composition don't matter)
        gas.TPX = T_ambient, p_outlet, comp_ambient
        # outlet constant pressure reactor here
        if self.moles:
            outlet_reactor = ct.IdealGasConstPressureMoleReactor(gas, energy=self.energy_off)
        else:
            outlet_reactor = ct.IdealGasConstPressureReactor(gas, energy=self.energy_off)
        # outlet_reactor valve
        outlet_valve = ct.Valve(cyl, outlet_reactor)
        outlet_delta = np.mod(outlet_close - outlet_open, 4 * np.pi)
        outlet_valve.valve_coeff = outlet_valve_coeff
        outlet_valve.set_time_function(lambda t: np.mod(
            crank_angle(t) - outlet_open, 4 * np.pi) < outlet_delta)
        # outlet reservoir
        outlet_reservoir = ct.Reservoir(gas)
        # Pressure controller for mass into atmosphere
        outlet_mfc = ct.PressureController(
            outlet_reactor, outlet_reservoir, master=outlet_valve)
        # define ambient pressure (temperature and composition don't matter)
        gas.TPX = T_ambient, p_ambient, comp_ambient
        ambient_air = ct.Reservoir(gas)
        # piston is modeled as a moving wall
        piston = ct.Wall(ambient_air, cyl)
        piston.area = A_piston
        piston.set_velocity(piston_speed)
        # create a reactor network containing the cylinder and limit advance step
        self.net = ct.ReactorNet([cyl, outlet_reactor])
        self.net.rtol, self.net.atol = rtol, atol
        cyl.set_advance_limit('temperature', delta_T_max)
        # apply numerical options
        self.apply_numerical_options()
        #####################################################################
        # Run Simulation
        #####################################################################
        # simulate with a maximum resolution of 1 deg crank angle
        dt = 1. / (360 * f)
        t_stop = sim_n_revolutions / f
        self.sim_end_time = 0
        while self.net.time < t_stop:
            # perform time integration
            try:
                self.net.advance(self.net.time + dt)
                ret_succ = True
            except Exception as e:
                self.exception = {"exception": str(e)}
                ret_succ = False
            finally:
                self.sim_end_time = self.net.time
        return ret_succ
